#include <stdio.h>
#define MAX 101
int dpMemo1[MAX];
int dpMemo2[MAX];
int dpMemo3[3];
int fibo(int n){
	if (n < 2){
		return n;
	}
	
	return fibo(n - 1) + fibo(n - 2);
}

int fibo_rec_dp(int n){
	if (n > 1 && dpMemo1[n] == 0){
		dpMemo1[n] = fibo_rec_dp(n - 1) + fibo_rec_dp(n - 2);
	}
	return dpMemo1[n];
}
int fibo_iter_dp(int n){
	for (int i = 2; i <= n; i++){
		dpMemo2[i] = dpMemo2[i - 1] + dpMemo2[i - 2];
	}

	return dpMemo2[n];
}
int fibo_iter_dp2(int n){
	for (int i = 2; i <= n; i++){
		dpMemo3[i % 3] = dpMemo3[(i - 1) % 3] + dpMemo3[(i - 2) % 3];
	}

	return dpMemo3[n%3];
}
int main(){
	int n = 50;
	dpMemo1[1] = 1;
	dpMemo2[1] = 1;
	dpMemo3[1] = 1;
	//	printf("fibo(%d) : %d\n", n, fibo(n));
	printf("fibo_rec_dp(%d) : %d\n", n, fibo_rec_dp(n));
	printf("fibo_iter_dp(%d) : %d\n", n, fibo_iter_dp(n));
	printf("fibo_iter_dp2(%d) : %d\n", n, fibo_iter_dp2(n));
	return 0;
}
