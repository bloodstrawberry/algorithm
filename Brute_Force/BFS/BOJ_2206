//baekjoon_2206
#pragma warning(disable : 4996)
#include <stdio.h>

int N, M;
int MAP[2][1010][1010];
int VISIT[2][1010][1010];

typedef struct st
{
	int r;
	int c;
	int k;
}QUEUE;

QUEUE QUE[1005 * 1005];
int RP, WP;

void input()
{
	int i, k;

	for (i = 0; i <= N + 1; i++)
		for (k = 0; k <= M + 1; k++)
			MAP[0][i][k] = MAP[1][i][k] = 1;

	for (i = 1; i <= N; i++)
	{
		for (k = 1; k <= M; k++)
		{
			scanf("%1d", &MAP[0][i][k]);
			MAP[1][i][k] = MAP[0][i][k];
		}
	}

}

void output()
{
	int i, k;

	for (i = 0; i <= N + 1; i++)
	{
		for (k = 0; k <= M + 1; k++)
		{
			printf("%d ", VISIT[0][i][k]);
		}
		putchar('\n');
	}

	putchar('\n');
}

void output1()
{
	int i, k;

	for (i = 0; i <= N + 1; i++)
	{
		for (k = 0; k <= M + 1; k++)
		{
			printf("%d ", VISIT[1][i][k]);
		}
		putchar('\n');
	}

	putchar('\n');
}

int dr[] = { 0, 1, 0, -1 };
int dc[] = { 1, 0, -1, 0 };

void BFS(int s, int e)
{
	int i, nr, nc;
	QUEUE out;

	WP = RP = 0;

	VISIT[0][s][e] = 1;

	QUE[WP].r = s;
	QUE[WP++].c = e;

	while (WP > RP)
	{
		out = QUE[RP++];
		//printf("%d\n", VISIT[out.k][out.r][out.c] + 1);
		for (i = 0; i < 4; i++)
		{
			nr = out.r + dr[i];
			nc = out.c + dc[i];

			if (nr < 1 || nc < 1 || nr > N || nc > M) continue;

			if (nr == N && nc == M)
			{
				printf("%d\n", VISIT[out.k][out.r][out.c] + 1);
				return;
			}

			if (out.k == 0)
			{
				if (MAP[0][nr][nc] == 0 && VISIT[0][nr][nc] == 0)
				{
					QUE[WP].r = nr;
					QUE[WP].c = nc;
					QUE[WP++].k = 0; // 이 부분이 없으면 WP가 용량 초과시, .k 부분이 1로 덮어 질 수 있음.
					VISIT[0][nr][nc] = VISIT[0][out.r][out.c] + 1;
				}
				else if (MAP[0][nr][nc] == 1)
				{
					QUE[WP].r = nr;
					QUE[WP].c = nc;
					QUE[WP++].k = 1;

					VISIT[1][nr][nc] = VISIT[0][out.r][out.c] + 1;
				}

				if (WP == 1000 * 900)
				{
					int k, c;

					c = 0;
					for (k = RP; k < WP;k++)
						QUE[c++] = QUE[k];

					WP = (WP - RP);
					RP = 0;

				}
			}
			else
			{

				if (MAP[1][nr][nc] == 0 && VISIT[1][nr][nc] == 0)
				{
					QUE[WP].r = nr;
					QUE[WP].c = nc;
					QUE[WP++].k = 1;
					VISIT[1][nr][nc] = VISIT[1][out.r][out.c] + 1;
				}

				if (WP == 1000 * 900)
				{
					int k, c;

					c = 0;
					for (k = RP; k < WP;k++)
						QUE[c++] = QUE[k];

					WP = (WP - RP);
					RP = 0;

				}
			}
		}
		
	}

	printf("%d\n", -1);

}

int main()
{
	int i;

	scanf("%d %d", &N, &M);

	if (N == 1 && M == 1)
	{
		printf("%d\n", 1);
		return 0;
	}

	input();

	BFS(1, 1);



	return 0;
}
