
int mod = 100000007;
typedef struct st
{
	int r;
	int c;
}RC;

int isAlpha(char a)
{
	if (a < 'A' || a > 'Z') return 0;
	return 1;
}

int isPlusMinus(char a)
{
	if (a == '+' || a == '-') return 1;
	return 0;
}

int changeNum(char *a, int len)
{
	register int i;
	int sum, mul;

	sum = 0, mul = 1;
	for (i = len-1; i >= 0; i--)
	{
		sum += (a[i] - '0') * mul;
		mul *= 10;
	}
	return sum;
}

RC changeRC(char *a, int len)
{
	RC rtn;

	if (len == 2)
	{
		rtn.c = a[0] - 'A';
		rtn.r = a[1] - '0' - 1;
		return rtn;
	}
	
	rtn.c = a[0] - 'A';
	rtn.r = (a[1] - '0') * 10 + a[2] - '0' - 1;
	return rtn;	
}

void mstrcpy(char *a, char *b)
{
	while (*a++ = *b++);
	return;
}

char Table[HEIGHT][WIDTH][LENGTH];
char refTable[HEIGHT][WIDTH];
int valueTable[HEIGHT][WIDTH];
RC rcTable[HEIGHT][WIDTH][27];
int rcIndex[HEIGHT][WIDTH];

void initTable(){
	
	register int i, j, k;
	for (i = 0; i < HEIGHT; i++)
		for (j = 0; j < WIDTH; j++)
			for (k = 0; k < LENGTH; k++)
				Table[i][j][k] = 0;

	for (i = 0; i < HEIGHT; i++)
		for (j = 0; j < WIDTH; j++)
			valueTable[i][j] = refTable[i][j] = rcIndex[i][j] = 0;

}

void calculate(int row, int col, char* equation)
{
	register int i, k;
	int flag, length, start;
	int sum;
	RC tmp;

	//숫자만 들어오는 경우.
	sum = flag = 0;
	if (equation[0] != '=')
	{
		if (equation[0] == '-')
		{
			for (i = 0; equation[i]; i++);
			valueTable[row][col] = -changeNum(equation + 1, i - 1);
		}
		else
		{
			for (i = 0; equation[i]; i++);
			valueTable[row][col] = changeNum(equation, i);
		}
	
		return; //참조 가능.
	}
	else
	{
		//참조 가능하면 계산한다.
		start = 1;// = 처리.
		if (equation[0] == '-')
		{
			flag = 1;
			start = 2;//-로 시작하는지 체크
		}

		for (i = start; equation[i]; i++)
		{
			if (isPlusMinus(equation[i]))
			{
				if (equation[i] == '+') flag = 0;
				else flag = 1;

			}
			else if (isAlpha(equation[i]))
			{
				if (isPlusMinus(equation[i + 2]) || equation[i + 2] == 0) //Ax이라면
				{
					int s;

					tmp = changeRC(equation + i, 2);

					i += 1;
					s = valueTable[tmp.r][tmp.c];

					if (flag) sum = (sum - s) % mod;
					else sum = (sum + s) % mod;

				}
				else //Axx라면
				{
					int s;

					tmp = changeRC(equation + i, 3);

					i += 2;
					s = valueTable[tmp.r][tmp.c];
					
					if (flag) sum = (sum - s) % mod;
					else sum = (sum + s) % mod;
				}
			}
			else
			{
				
				int s;

				k = 0;
				while (1)
				{
					if (equation[i + k] == 0 || isPlusMinus(equation[i + k])) break;
					k++;
				}

				s = changeNum(equation + i, k);

				if (flag) sum = (sum - s) % mod;
				else sum = (sum + s) % mod;

				i += (k - 1);
			}
		}
	}

	valueTable[row][col] = sum;
}

int BFS(int row, int col)
{
	int index;
	register int i, k;
	int WP, RP;
	RC out;

	RC Que[HEIGHT * WIDTH * 27];
	int Visit[HEIGHT][WIDTH] = { { 0, } };
	
	WP = RP = 0;

	for (i = 0; i < rcIndex[row][col]; i++)
	{
		int rr, cc;
		rr = rcTable[row][col][i].r;
		cc = rcTable[row][col][i].c;

		if (!Visit[rr][cc])
		{
			Que[WP].r = rr;
			Que[WP++].c = cc;
			Visit[rr][cc] = 1;
		}
	}

	while (WP > RP)
	{
		out = Que[RP++];
		
		if (out.r == row && out.c == col)
		{
			refTable[row][col] = 1;
			return 1; //순환 참조!
		}

		if (refTable[out.r][out.c])
		{
			refTable[row][col] = 1;
			return 1;
		}	

		for (i = 0; i < rcIndex[out.r][out.c]; i++)
		{
			int rr, cc;
			rr = rcTable[out.r][out.c][i].r;
			cc = rcTable[out.r][out.c][i].c;

			if (!Visit[rr][cc])
			{
				Que[WP].r = rr;
				Que[WP++].c = cc;
				Visit[rr][cc] = 1;
			}
		}
	}

	refTable[row][col] = 0;

	return 0;
}


void inputRCTable(int row, int col, char equation[])
{
	register int i, k;
	int flag, length, start;
	RC tmp;

	rcIndex[row][col] = 0;

	//수식이 비어있는 경우.
	if (equation[0] == 0) return;

	//숫자만 들어오는 경우.
	if (equation[0] != '=') return; 
	else
	{
		//참조 가능한지 불가능한지 알아보자.
		flag = length = 0;
		start = 1;// = 처리.
		if (equation[0] == '-') start = 2;//-로 시작하는지 체크
		for (i = start; equation[i]; i++)
		{
			if (isAlpha(equation[i]))
			{
				if (isPlusMinus(equation[i + 2]) || equation[i + 2] == 0) //Ax이라면
				{
					tmp = changeRC(equation + i, 2);
					
					rcTable[row][col][rcIndex[row][col]].r = tmp.r;
					rcTable[row][col][rcIndex[row][col]++].c = tmp.c;

					i += 1;
				}
				else //Axx라면
				{
					tmp = changeRC(equation + i, 3);

					rcTable[row][col][rcIndex[row][col]].r = tmp.r;
					rcTable[row][col][rcIndex[row][col]++].c = tmp.c;
					
					i += 2;
				}
			}
		}

	}

	return;
}


bool updateCell(int row, int col, char equation[LENGTH], int value[HEIGHT][WIDTH]){
	// TO DO    	
	int cnt, tmp;
	register int i, j;
	mstrcpy(Table[row][col], equation);
	inputRCTable(row, col, equation);

	//들어온 값이 참조 가능하다면, 계산한다.
	//계산후 관련 테이블을 돌린다.
	//참조 가능한 셀이 들어올 경우, 기존의 참조 가능한 셀은 여전히 참조 가능.xxxx
	//기존의 참조 불가 셀은 참조 가능할 수 있음.
	if (!BFS(row, col))
	{
		refTable[row][col] = 0;
		calculate(row, col, equation);

		cnt = 0;
		while (1)
		{
			for (i = 0; i < HEIGHT; i++)
			{
				for (j = 0; j < WIDTH; j++)
				{
					calculate(i, j, Table[i][j]);
					if (refTable[i][j]) //참조 불가능 셀이라면.
					{
						//다시 체크해본다.
						//참조 가능하다면. 
						if (!BFS(i, j)) cnt++;	
					}
				}
			}
			if (cnt) cnt = 0;
			else break;
		}
	}
	//참조 불가능 하다면. 넘긴다.
	//참조 불가 셀이 추가 되면, 기존의 참조 가능 셀이 불가가 되는 경우가 생긴다.
	//기존의 참조 불가능 셀은 그대로 참조 불가가 된다.
	else 
	{
		cnt = 0;
		while (1)
		{
			for (i = 0; i < HEIGHT; i++)
			{
				for (j = 0; j < WIDTH; j++)
				{
					calculate(i, j, Table[i][j]);
					if (refTable[i][j] == 0)		
						if (BFS(i, j)) cnt++;
				}
			}

			if (cnt) cnt = 0;
			else break;
		}
	}

	cnt = 0;
	while (1)
	{
		for (i = 0; i < HEIGHT; i++)
		{
			for (j = 0; j < WIDTH; j++)
			{
				if (refTable[i][j] == 0)
				{
					tmp = valueTable[i][j];
					calculate(i, j, Table[i][j]);
					if (tmp != valueTable[i][j]) cnt++;
				}	
			}
		}
		if (cnt) cnt = 0;
		else break;
	}

	cnt = 0;
	for (i = 0; i < HEIGHT; i++)
		for (j = 0; j < WIDTH; j++)	
			cnt += refTable[i][j];
	

	for (i = 0; i < HEIGHT; i++)
		for (j = 0; j < WIDTH; j++)
			if (refTable[i][j]) valueTable[i][j] = cnt;

	for (i = 0; i < HEIGHT; i++)
	{
		for (j = 0; j < WIDTH; j++)
		{
			if (Table[i][j][0] == 0) value[i][j] = 0;
			else value[i][j] = valueTable[i][j];
		}		
	}

	if (cnt) return false;
	return true;
}
