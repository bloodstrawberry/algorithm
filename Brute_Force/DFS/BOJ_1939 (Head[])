//baekjoon_1939
#pragma warning(disable : 4996)
#include <stdio.h>
#include <stdlib.h>

int N, M;
int S, E;
int VISIT[10100];

int CNT;

typedef struct st
{
	int index;
	int weight;
	struct st *next;
}Node;

Node MEM[150000];

Node Nd[10100];
Node Tail[10100];

Node* CreateNode()
{
	Node *nd = &MEM[CNT++];
	nd->index = 0;
	nd->weight = 0;
	nd->next = NULL;

	return nd;
}

void MakeNode(int parent, int child, int weight)
{
	Node *nd = (Node *)calloc(1, sizeof(Node));

	nd->index = child;
	nd->weight = weight;

	if (Nd[parent].next == NULL)
		Nd[parent].next = Tail[parent].next = nd;
	else
	{
		Tail[parent].next->next = nd;
		Tail[parent].next = nd;
	}
}

void output(int n)
{
	/*Node *p = Nd[n];

	while (p != NULL)
	{
		printf("%d %p\n", p->index, p);
		p = p->next;
	}*/

	return;
}


int DFS(int st, int W)
{
	Node *p;
	if (st == E) return 1;

	p = &Nd[st];
	while (p->next != NULL)
	{
		if (VISIT[p->next->index] || p->next->weight < W)
		{
			p = p->next;
			continue;
		}
		VISIT[p->next->index] = 1;
		if (DFS(p->next->index, W)) return 1;
		p = p->next;
	}
	return 0;
}

int main()
{
	int i;
	int a, b, c;
	int right, left, mid, ans;

	scanf("%d %d", &N, &M);

	for (i = 0; i < M; i++)
	{
		scanf("%d %d %d", &a, &b, &c);
		MakeNode(a, b, c);
		MakeNode(b, a, c);
	}

	scanf("%d %d", &S, &E);

	left = 1;
	right = 1000000000;

	ans = 0;
	while (left <= right)
	{
		for (i = 1; i <= N; i++)
			VISIT[i] = 0;

		mid = (left + right) / 2;

		if (DFS(S, mid))
		{
			ans = mid;
			left = mid + 1;
		}
		else
			right = mid - 1;
	}

	printf("%d\n", ans);


	return 0;
}
