//baekjoon_11779
//최소비용 구하기2, 경로 저장하기

#include <stdio.h>
#define INF (0x7fff0000)

int V, E;
int st, ed;
typedef struct st
{
	int value;
	int weight;
	struct st *next;
}NODE;

NODE HEAD[1001];
NODE POOL[100001];
int cnt;

void Make(int p, int c, int w)
{
	NODE *nd = &POOL[cnt++];

	nd->value = c;
	nd->weight = w;

	nd->next = HEAD[p].next;
	HEAD[p].next = nd;
}

void output(int num)
{
	NODE *nd = HEAD[num].next;

	while (nd)
	{
		printf("%d\n", nd->value);
		nd = nd->next;
	}
}

int D[1001];
int visit[1001];
int from[1001];

typedef struct st2
{
	int node;
	int weight;
}EDGE;

EDGE heap[300010];
int hn;

EDGE pop()
{
	int i;
	EDGE ret, tmp;

	ret = heap[1];
	heap[1] = heap[hn];
	heap[hn--].weight = 0x7fff0000;

	for (i = 1; i * 2 <= hn;)
	{
		if (heap[i].weight < heap[i * 2].weight && heap[i].weight < heap[i * 2 + 1].weight) break;
		if (heap[i * 2].weight < heap[i * 2 + 1].weight)
		{
			tmp = heap[i];
			heap[i] = heap[i * 2];
			heap[i * 2] = tmp;

			i = i * 2;
		}
		else
		{
			tmp = heap[i];
			heap[i] = heap[i * 2 + 1];
			heap[i * 2 + 1] = tmp;

			i = i * 2 + 1;
		}
	}

	return ret;
}

void push(EDGE x)
{
	int i;
	EDGE tmp;
	heap[++hn] = x;
	
	for (i = hn; i > 1; i /= 2)
	{
		if (heap[i / 2].weight < heap[i].weight) break;
		
		tmp = heap[i / 2];
		heap[i / 2] = heap[i];
		heap[i] = tmp;
	}
}

void DFS(int L, int ed)
{
	if (from[ed] == 0)
	{
		printf("%d\n", L);
		printf("%d ", ed);
		return;
	}

	DFS(L + 1, from[ed]);
	printf("%d ", ed);
}

int main()
{
	int i, k, u, v, w;
	
	scanf("%d\n%d", &V, &E);

	for (i = 0; i < E; i++)
	{
		scanf("%d %d %d", &u, &v, &w);
		Make(u, v, w);
	}

	scanf("%d %d", &st, &ed);

	for (i = 1; i <= V; i++) D[i] = INF;

	D[st] = 0;

	push({ st, 0 });

	while (hn)
	{
		NODE *nd;
		EDGE tmp;

		tmp = pop();

		if (visit[tmp.node]) continue;

		visit[tmp.node] = 1;

		for (nd = HEAD[tmp.node].next; nd; nd = nd->next)
		{
			if (D[nd->value] > D[tmp.node] + nd->weight)
			{
				from[nd->value] = tmp.node; // 경로 
				D[nd->value] = D[tmp.node] + nd->weight;
				push({ nd->value, D[nd->value] });
			}
		}
	}

	printf("%d\n", D[ed]);
	
	DFS(1, ed);
	putchar('\n');

	return 0;
}
