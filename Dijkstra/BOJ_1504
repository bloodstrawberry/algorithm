//baekjoon_1504
//특정한 최단 경로

#include <stdio.h>
#define INF (0x7fff0000)
typedef long long int ll;

int N, M;
int MAP[810][810];

typedef struct st2
{
	int node;
	int value;
}HEAP;

HEAP heap[100100];
int hn;

HEAP pop()
{
	int i;
	HEAP ret, tmp;

	ret = heap[1];
	heap[1] = heap[hn];
	heap[hn--].value = INF;

	for (i = 1; i * 2 <= hn;)
	{
		if (heap[i].value < heap[i * 2].value && heap[i].value < heap[i * 2 + 1].value) break;
		else if (heap[i * 2].value < heap[i * 2 + 1].value)
		{
			tmp = heap[i * 2];
			heap[i * 2] = heap[i];
			heap[i] = tmp;

			i = i * 2;
		}
		else
		{
			tmp = heap[i * 2 + 1];
			heap[i * 2 + 1] = heap[i];
			heap[i] = tmp;

			i = i * 2 + 1;
		}
	}

	return ret;
}

void push(HEAP x)
{
	int i;
	HEAP tmp;

	heap[++hn] = x;

	for (i = hn; i > 1; i /= 2)
	{
		if (heap[i / 2].value < heap[i].value) break;
		
		tmp = heap[i];
		heap[i] = heap[i / 2];
		heap[i / 2] = tmp;
	}
}


ll Dijkstra(int node, int end)
{
	int i;
	ll dist[810];
	int visit[810] = { 0 };

	for (i = 1; i <= N; i++) dist[i] = INF;
	
	dist[node] = 0;
	push({ node, 0 });

	while (hn)
	{
		HEAP tmp;
		tmp = pop();

		if (visit[tmp.node]) continue;
		visit[tmp.node] = 1;

		for (i = 1; i <= N; i++)
		{
			if (!MAP[tmp.node][i] || tmp.node == i) continue;

			if (dist[i] > dist[tmp.node] + MAP[tmp.node][i])
			{
				dist[i] = dist[tmp.node] + MAP[tmp.node][i];
				push({ i, dist[i] });
			}
		}
	}

	return dist[end];
}

int main()
{
	int i, k, p, c, w;
	long long int ans1, ans2, ans3;
	int n1, n2;

	scanf("%d %d", &N, &M);

	for (i = 0; i < M; i++)
	{
		scanf("%d %d %d", &p, &c, &w);
		if (p == c) continue;
		if (MAP[p][c] == 0) MAP[p][c] = MAP[c][p] = w;
		else if (MAP[p][c] > w) MAP[p][c] = MAP[c][p] = w;
	}

	scanf("%d %d", &n1, &n2);

	ans1 = Dijkstra(1, n1) + Dijkstra(n1, n2) + Dijkstra(n2, N);
	ans2 = Dijkstra(1, n2) + Dijkstra(n2, n1) +	Dijkstra(n1, N);
	ans3 = (ans1 < ans2) ? ans1 : ans2;

	if (ans3 >= INF) printf("-1\n");
	else printf("%lld\n", ans3);

	return 0;
}
