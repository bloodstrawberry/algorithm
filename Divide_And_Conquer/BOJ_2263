//baekjoon_2263
//트리의 순회

// 프리오더 루트 -> L -> R
// 인오더 L -> 루트 -> R
// 포스트오더 L -> R -> 루트

#include <stdio.h>

int N;
int inorder[100010];
int postorder[100010];
int position[100010];

void solve(int in_st, int in_ed, int post_st, int post_ed)
{
	// p : root의 position, l : 
	int root, p, l;
	if (in_st > in_ed || post_st > post_ed) return;
	
	root = postorder[post_ed];
	printf("%d ", root);

	p = position[root];
	l = p - in_st;
	
	// inorder   : 4 2 7 5 [1] 3 6
	// postorder : 4 7 5 2 6 3 [1]
	// inorder에서 [1]을 기준으로 왼쪽과 오른쪽을 구분한다.

	// 왼쪽 solve
	// in_st -> in_st
	// in_ed -> [1]의 위치 - 1 -> p - 1
	// post_st -> post_st
	// post_ed -> post_st + is~p사이의 개수(l) -1

	// 오른쪽 solve
	// in_st -> p + 1
	// in_ed -> in_ed
	// post_st -> post_st + l
	// post_ed -> post_ed - 1

	solve(in_st, p - 1, post_st, post_st + l - 1);
	solve(p + 1, in_ed, post_st + l, post_ed - 1);
}

int main(void)
{
	int i;

	scanf("%d", &N);

	for (i = 0; i < N;i++) scanf("%d", &inorder[i]);
	for (i = 0; i < N;i++) scanf("%d", &postorder[i]);
	for (i = 0; i < N;i++) position[inorder[i]] = i;

	solve(0, N - 1, 0, N - 1);
	putchar('\n');
	
	return 0;
}
