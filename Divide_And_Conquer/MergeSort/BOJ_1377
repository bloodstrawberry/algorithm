//baekjoon_1377
//버블 소트
#pragma warning (disable:4996)
#include <stdio.h>

typedef struct st
{
	int value;
	int index;
}A;


A a[5000100];
A b[5000100];

void merge(int start, int end)
{
	int mid, i, j, k;

	mid = (start + end) / 2;
	i = start;
	j = mid + 1;
	k = 0;

	while (i <= mid && j <= end)
	{
		if (a[i].value <= a[j].value) b[k++] = a[i++];
		else b[k++] = a[j++];
	}

	while (i <= mid) b[k++] = a[i++];
	while (j <= end) b[k++] = a[j++];
	for (i = start; i <= end;i++)
		a[i] = b[i - start];

}

void sort(int start, int end)
{
	int mid;
	if (start == end) return;

	mid = (start + end) / 2;
	sort(start, mid);
	sort(mid + 1, end);
	merge(start, end);
}

int main(void)
{
	int i, ans, N;

	scanf("%d", &N);

	for (i = 0; i < N;i++)
	{
		scanf("%d", &a[i].value);
		a[i].index = i;
	}

	sort(0, N - 1);

	//sorting이 돼야 하는 수들은 매 정렬마다 항상 1칸씩만 앞으로 움직이게 된다.
	//a[i].index - i가 음이 되는 경우는 앞에 있는 수가 뒤로 가는 경우이므로 셀 필요가 없다.
	//앞으로 나오는 수 중 가장 많이 움직인 수가 버블 소트의 횟수가 된다.

	ans = 0;
	for (i = 0; i < N;i++)
		if (ans < a[i].index - i) ans = a[i].index - i;
	
	printf("%d\n", ans + 1);

	return 0;
}
