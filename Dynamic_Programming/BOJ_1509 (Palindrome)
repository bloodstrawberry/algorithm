//baekjoon_1509
//팰린드롬

#include <stdio.h>

int L;
char str[2510];

//DP[i] = str의 i번째 문자열 까지의 팰린드롬 분할 개수의 최소값.
//DP[i] = min(D[j-1]) + 1 (i~j는 팰린드롬)
//i~j -> 팰린드롬 체크(DFS)

int DP[2510];
int Memo[2510][2510];

int DFS(int s, int e)
{
	if (s == e) return 1;
	else if (s + 1 == e)
	{
		if (str[s] == str[e]) return 1;
		return 0;
	}
	
	if (Memo[s][e] >= 0) return Memo[s][e];
	if (str[s] != str[e]) return Memo[s][e] = 0;
	else return Memo[s][e] = DFS(s + 1, e - 1);
}

int main(void)
{
	int i, k;

	scanf("%s", str + 1);

	for (L = 1;str[L];L++);
	L--;

	for (i = 1; i <= L;i++)
		for (k = 1; k <= L;k++)
			Memo[i][k] = -1;

	for (i = 1; i <= L;i++)
	{
		DP[i] = -1;
		for (k = 1; k <= i;k++)
		{

			// [1~k-1], [k~i]
			// [k~i]가 팰린드롬이면, [1~k-1]까지의 팰린드롬 갯수에서 + 1이 답이 된다.
			if (DFS(k,i))
			{
				if (DP[i] == -1 || DP[i] > DP[k - 1] + 1)
					DP[i] = DP[k - 1] + 1; //작은 수로 갱신
			}
		}
	}

	printf("%d\n", DP[L]);

	return 0; 
}
