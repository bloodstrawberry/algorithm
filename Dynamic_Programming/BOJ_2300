//baekjoon_2300
//기지국.

#include <stdio.h>

int N;

typedef struct st
{
	int x;
	int y;
}RC;

RC A[10010];
int D[10010];
// 1 2 3 4 -> 1,3 2,4 보다는 1,2 3,4 로 연속으로 짓는게 무조건 이득.
// 음수는 양수로 받아도 정사각형의 모양에 변화는 없음.

// D[i] = i번째 건물까지 통신 범위에 포함시키는 최소 설치 비용.
// D[i] = min(D[j-1] + j~i까지 통신 범위에 포함하는 기지국 설치 비용)

// 정사각형은 기지국에 양 옆에 있거나 -> A[i].x - A[j].x = 폭 
// 세로가 가장 위에 있는 경우 뿐. -> 중심에서 x2 -> 폭

RC B[10010];

void merge(int start, int end)
{
	int mid, i, j, k;

	mid = (start + end) / 2;
	i = start;
	j = mid + 1;
	k = 0;

	while (i <= mid && j <= end)
	{
		if (A[i].x <= A[j].x) B[k++] = A[i++];
		else B[k++] = A[j++];
	}

	while (i <= mid) B[k++] = A[i++];
	while (j <= end) B[k++] = A[j++];
	for (i = start; i <= end;i++)
		A[i] = B[i - start];

}

void sort(int start, int end)
{
	int mid;
	if (start >= end) return;

	mid = (start + end) / 2;
	sort(start, mid);
	sort(mid + 1, end);
	merge(start, end);
}

int main()
{
	int i, k;

	scanf("%d", &N);

	for (i = 1; i <= N;i++)
	{
		int x, y;
		scanf("%d %d", &x, &y);

		if (y < 0) y *= -1;

		A[i].x = x, A[i].y = y;

		D[i] = 0x7fff0000;
	}
	
	sort(1, N);

	D[0] = 0;
	for (i = 1; i <= N;i++)
	{
		int up = 0;
		for (k = i; k >= 1;k--)
		{
			up = (up > A[k].y) ? up : A[k].y;

			int square = ((A[i].x - A[k].x) > up * 2) ? (A[i].x - A[k].x) : up * 2;
			if (D[i] > D[k - 1] + square) D[i] = D[k - 1] + square;
		}
	}

	printf("%d\n", D[N]);

	return 0;
}
