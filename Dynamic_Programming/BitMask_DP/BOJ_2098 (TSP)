//baekjoon_2098
//외판원 

#include <stdio.h>

int N;
int MAP[20][20];
 
// 1 2 3 4 = 10 -> 5
// 1 3 2 4 = 20 -> 5 
// 어떤 도시를 방문 했는 지가 중요. 순서는 의미가 없음.

// D[S][i] = 도시를 방문한 상태가 S이고, 현재 있는 위치가 i일때 최소값.
// 1~i까지 도착한 후, j를 가는 경우
// 1. D[S | (1<<j)][j] = D[S][i] + A[i][j];
// 2. D[S][i] = min(D[S-(1<<i)][j] + A[j][i];

int D[1<<20][20];
int main(void)
{
	int i, j, k, ans;

	scanf("%d", &N);

	for (i = 0; i < N;i++)
		for (k = 0; k < N;k++)
			scanf("%d", &MAP[i][k]);

	for (i = 0; i < (1 << N);i++)
		for (k = 0; k < N;k++)
			D[i][k] = 100000000;

	D[1][0] = 0; // 출발점, 0번 도시 방문 -> 2^0 = 1;
	for (i = 0; i < (1 << N);i++)
	{
		for (j = 1; j < N;j++)
		{
			if (i & (1 << j)) //D[i][j] = 1~i까지 도착한 후, j가 현재 위치인 경우. 즉 i에 j가 포함되어 있는지 체크.
			{
				for (k = 0; k < N;k++)
					if ((i & (1 << k)) && MAP[k][j]) // k에서 j로 가는 경우를 고려. 즉 k가 포함되어있는지 체크. && k에서 j가 갈 수 있는 경우. 
						// 현재 위치가 j = 상태 i에서 j를 뺀 경우이고, 그 때의 위치가 k인 최소값 + k->j로 가는 비용.
						D[i][j] = (D[i][j] < D[i - (1 << j)][k] + MAP[k][j]) ? D[i][j] : D[i - (1 << j)][k] + MAP[k][j];
			}
		}
	}
		
	ans = 100000000;
	for (i = 1; i < N;i++)
		if (MAP[i][0]) ans = (ans < D[(1 << N) - 1][i] + MAP[i][0]) ? ans : D[(1 << N) - 1][i] + MAP[i][0];
	
	printf("%d\n", ans);

	return 0;
}

