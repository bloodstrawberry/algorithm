//baekjoon_11780
//플로이드 2

#include <stdio.h>

int T, N, M;
int MAP[510][510];
int v[510][510]; // v[i][j] = i->j간선이 원래 어디를 가르켰는지. 따라서 초기화는 v[i][j] = j; 

int stack[510];
int sp;

// 1->5 의 최단 경로가 1-> 3 -> 2 -> 5라면.
// v[1][5] = 3;
// v[3][5] = 2;
// v[2][5] = 5;

void path(int L, int s, int e)
{
	int i;

	if (s == e)
	{
		stack[sp++] = s;
		printf("%d ", L);

		for (i = 0; i < sp;i++) printf("%d ", stack[i]);
		putchar('\n');
		sp = 0;

		return;
	}

	stack[sp++] = s;
	path(L + 1, v[s][e], e);
}

int main()
{
	int i, k, j, p, c, w;

	scanf("%d %d", &N, &M);

	for (i = 1; i <= N; i++)
		for (k = 1; k <= N; k++)
			MAP[i][k] = 0, v[i][k] = k;

	for (i = 0; i < M; i++)
	{
		scanf("%d %d %d", &p, &c, &w);

		if (p == c) continue;

		if (MAP[p][c] == 0) MAP[p][c] = w;
		else if (MAP[p][c] > w) MAP[p][c] = w;
	}

	for (k = 1; k <= N;k++)
	{
		for (i = 1; i <= N;i++)
		{
			for (j = 1; j <= N;j++)
			{
				if (i == j) continue;
				if (MAP[i][k] && MAP[k][j]) //경로가 있는 경우.
				{
					if (!MAP[i][j])
					{
						MAP[i][j] = MAP[i][k] + MAP[k][j]; //i->j 경로가 없다면.
						v[i][j] = v[i][k];
					}
					else
					{
						if (MAP[i][j] > MAP[i][k] + MAP[k][j])
						{
							MAP[i][j] = MAP[i][k] + MAP[k][j];
							v[i][j] = v[i][k];
						}
					}
				}
			}
		}
	}

	for (i = 1; i <= N;i++)
	{
		for (k = 1; k <= N;k++)
		{
			if (i == k)
			{
				printf("0 ");
				continue;
			}

			if (!MAP[i][k])
			{
				printf("0 ");
				continue;
			}

			printf("%d ", MAP[i][k]);
		}
		putchar('\n');
	}

	for (i = 1; i <= N;i++)
	{
		for (k = 1; k <= N;k++)
		{
			if (i == k || !MAP[i][k]) printf("0\n");
			else path(1, i, k);
		}
	}

	return 0;
}
