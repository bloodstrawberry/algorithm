#include <stdio.h>
#define INF (0x7fff0000)

int T, N, M;
int MAP[510][510];

typedef struct st
{
	int to;
	int cost;
}EDGE;

EDGE Edge[510][510];

int Que[510 * 510];
int RP, WP;
int c[510];
int d[510];

void SPFA(int n)
{
	int i;

	RP = WP = 0;
	for (i = 1; i <= N;i++) d[i] = INF, c[i] = 0;

	d[n] = 0;
	c[n] = 1;
	Que[WP++] = n;

	while (WP > RP)
	{
		int from = Que[RP++];

		c[from] = 0;

		for (i = 1; i <= Edge[from][0].to;i++)
		{
			int to = Edge[from][i].to;
			int cost = Edge[from][i].cost;

			if (d[to] > d[from] + cost)
			{
				d[to] = d[from] + cost;
				if (!c[to])
				{
					Que[WP++] = to;
					c[to] = 1;
				}
			}
		}
	}

	for (i = 1; i <= N;i++)
	{
		if (d[i] == INF) printf("-1 ");
		else printf("%d ", d[i]);
	}

}

int main()
{
	int i, k, j, tc, p, c, w;

	scanf("%d", &T);
	for (tc = 1; tc <= T; tc++)
	{
		scanf("%d %d", &N, &M);

		for (i = 1; i <= N; i++)
			for (k = 1; k <= N; k++)
				MAP[i][k] = 0;

		for (i = 0; i < M; i++)
		{
			scanf("%d %d %d", &p, &c, &w);

			if (p == c) continue;

			if (MAP[p][c] == 0) MAP[p][c] = w;
			else if (MAP[p][c] > w) MAP[p][c] = w;
		}

		for (i = 1; i <= N;i++)
		{
			Edge[i][0].to = 0; // Edge[i][0]은 Edge[i]의 개수.
			for (k = 1; k <= N;k++)
			{
				if (MAP[i][k])
				{
					Edge[i][++Edge[i][0].to].cost = MAP[i][k];
					Edge[i][Edge[i][0].to].to = k;
				}
			}
		}

		printf("#%d ", tc);
		for (i = 1; i <= N;i++) SPFA(i);
		putchar('\n');
	}

	return 0;
}
