//baekjoon_11404
//플로이드, SPFA, Shortest Path Faster Algorithm

#include <stdio.h>
#define INF (0x7fff0000)

int T, N, M;
int MAP[510][510];

int Que[510];
int RP, WP;
int c[510];
int d[510];

void SPFA(int n)
{
	int i;
	
	RP = WP = 0;
	for (i = 1; i <= N;i++) d[i] = INF, c[i] = 0;

	d[n] = 0;
	c[n] = 1;
	Que[WP++] = n;

	while (WP > RP)
	{
		int from = Que[RP++];
		
		c[from] = 0;

		for (i = 1; i <= N;i++)
		{
			if (!MAP[from][i]) continue;

			int to = i;
			int cost = MAP[from][i];

			if (d[to] > d[from] + cost)
			{
				d[to] = d[from] + cost;
				if (!c[to])
				{
					Que[WP++] = to;
					c[to] = 1;
				}
			}
		}

	}

	for (i = 1; i <= N;i++)
	{
		if (d[i] == INF) printf("0 ");
		else printf("%d ", d[i]);
	}
	putchar('\n');
}

int main()
{
	int i, k, j, tc, p, c, w;

	scanf("%d %d", &N, &M);

	for (i = 0; i < M; i++)
	{
		scanf("%d %d %d", &p, &c, &w);

		if (p == c) continue;

		if (MAP[p][c] == 0) MAP[p][c] = w;
		else if (MAP[p][c] > w) MAP[p][c] = w;
	}

	for (i = 1; i <= N;i++) SPFA(i);

	return 0;
}
