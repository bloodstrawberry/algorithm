
typedef enum
{
	NAME,
	NUMBER,
	BIRTHDAY,
	EMAIL,
	MEMO
} FIELD;

typedef struct
{
	int count;
	char str[20];
} RESULT;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#define MAX_DATA (79943)
typedef long long int ll;

typedef struct st
{
	char data[5][25];
	int deleteFlag;
}DATA;

DATA POOL[50010];
int cnt;

typedef struct st2
{
	DATA *db;
	struct st2 *next;
}HASH;

HASH Hash[5][MAX_DATA];
HASH MEMORY[250500];
int hcnt;

void mstrcpy(char *a, char *b)
{
	while (*a++ = *b++);
}

int mstrcmp(char *a, char *b)
{
	while (*a || *b)
		if (*a++ != *b++) return 1;

	return 0;
}

ll hash(char *str)
{
	unsigned long hash = 5381;
	int c;

	while (c = *str++)
	{
		hash = (((hash << 5) + hash) + c) % MAX_DATA;
	}

	return hash % MAX_DATA;
}

void InitDB()
{
	register int i, k;
	hcnt = cnt = 0;
	
	for (i = 0; i < 5; i++)
		for (k = 0; k < MAX_DATA; k++)
			Hash[i][k].next = 0;
}

void Add(char* name, char* number, char* birthday, char* email, char* memo)
{
	register int i, k;
	ll h[5];
	HASH *hashTable[5];

	DATA *db = &POOL[cnt++];
	mstrcpy(db->data[0], name);
	mstrcpy(db->data[1], number);
	mstrcpy(db->data[2], birthday);
	mstrcpy(db->data[3], email);
	mstrcpy(db->data[4], memo);
	db->deleteFlag = 0;

	h[0] = hash(name);
	h[1] = hash(number);
	h[2] = hash(birthday);
	h[3] = hash(email);
	h[4] = hash(memo);
	
	hashTable[0] = &MEMORY[hcnt++];
	hashTable[0]->db = db;
	hashTable[0]->next = 0;
	
	hashTable[1] = &MEMORY[hcnt++];
	hashTable[1]->db = db;
	hashTable[1]->next = 0;

	hashTable[2] = &MEMORY[hcnt++];
	hashTable[2]->db = db;
	hashTable[2]->next = 0;

	hashTable[3] = &MEMORY[hcnt++];
	hashTable[3]->db = db;
	hashTable[3]->next = 0;

	hashTable[4] = &MEMORY[hcnt++];
	hashTable[4]->db = db;
	hashTable[4]->next = 0;

	for (i = 0; i < 5; i++)
	{
		if (Hash[i][h[i]].next == 0)
		{
			Hash[i][h[i]].next = hashTable[i];
		}
		else
		{
			hashTable[i]->next = Hash[i][h[i]].next;
			Hash[i][h[i]].next = hashTable[i];
		}
	}

}
int Delete(FIELD field, char* str)
{
	register int cnt;
	ll h = hash(str);
	HASH *p;
	DATA *tmp;
	cnt = 0;

	p = &Hash[field][h];
	while (p->next)
	{
		tmp = p->next->db;
		if (!mstrcmp(tmp->data[field], str) && !tmp->deleteFlag)
		{
			tmp->deleteFlag = 1;
			p->next = p->next->next;

			cnt++;
		}
		else 
			p = p->next;
	}

	return cnt;
}

int Change(FIELD field, char* str, FIELD changefield, char* changestr)
{
	register int i, cnt;
	ll h = hash(str);
	HASH *p;
	cnt = 0;
	
	for (p = Hash[field][h].next; p; p = p->next)
	{
		if (!mstrcmp(p->db->data[field], str) && !p->db->deleteFlag)
		{
			p->db->deleteFlag = 1;

			DATA db;
			
			for (i = 0; i < 5; i++)
			{
				if (i == changefield) continue;
				mstrcpy(db.data[i], p->db->data[i]);
			}

			mstrcpy(db.data[changefield], changestr);

			Add(db.data[0], db.data[1], db.data[2], db.data[3], db.data[4]);
			cnt++;
		}
	}

	return cnt;
}

RESULT Search(FIELD field, char* str, FIELD ret_field)
{
	RESULT result;
	result.count = 0;

	register int i, cnt;
	ll h = hash(str);
	HASH *p;
	cnt = 0;

	for (p = Hash[field][h].next; p; p = p->next)
	{
		if (!mstrcmp(p->db->data[field], str) && !p->db->deleteFlag)
		{
			cnt++;
			if (cnt == 1) mstrcpy(result.str, p->db->data[ret_field]);	
		}
	}

	result.count = cnt;

	return result;
}
