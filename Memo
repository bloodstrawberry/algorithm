- Convex Hull

Graham's Scan
N개의 점 중, Y좌표가 가장 낮은 점 선택
여러 개 있다면 x가 가장 작은 것을 선택

선택된 점을 기준으로 각도순 정렬, 각도가 같다면, 거리순 정렬
ccw(A,B,C) -> 시계, 반시계 판단 함수
Stack을 이용해서 컨벡스 헐을 만들어 나감.

Andrew's Algorithm
N개의 점을 X축 값으로 정렬.
만약 X축 값이 같다면, Y축 값으로 정렬.
위 껍질 만든 후 아래 껍질 만듬.

- Closest, https://www.acmicpc.net/blog/view/25
Line Sweeping
x좌표를 기준으로 점들 정렬후 Iterative하게 점들 순회
D값을 갱신하며 (D-xi, D+xi) 영역의 점들을 set(BST)에 저장(stl필요)
lower_bound(), upper_bound()를 이용해 영역에 거리가 D이하인 점 탐색
D값을 갱신하며 1~3의 과정 반복

- 선 맞춤
DP
D[i] = i번째 점을 지나며, 1~i-1까지의 점들과는 문제의 조건을 만족하는 꺾은 선 중 가장 적은 선분의 개수
현재 점(i)에서 뒤를 보며 해당 점(j)이 가능한 기울기의 범위 내에 있는 경우 D[j] 를 D[i] + 1로 갱신


- 단어가 등장하는 횟수
KMP, 실패 함수

- 두 번 이상 등장하는 문자열


- 프리랜서
끝나는 시간 기준으로 정렬을 한다.
D[i] = [1,i]번째 일까지 생각했을 때, 최고 얻는 돈
i번째 일을 안하는 경우 : D[i-1]
i번째 일을 하는 경우 : D[Before(i)] + Ci
Before(i)는 i와 겹치지 않는 일정 중 가장 큰 index


- Largest Empty Square
D[i][j] = (i,j)를 가장 오른쪽 아래로 하는 비어 있는 가장 큰 정사각형의 길이
If(A[i][j] == 1) D[i][j] = 0;
else D[i][j] = min(D[i-1][j],D[i][j-1],D[i-1][j-1]) + 1;


