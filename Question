#include <stdio.h>
typedef long long int ll;
#define TEST (100011)
//100010은 맞음 100011은 틀림
// 그외 특정 숫자는 맞고 특정 숫자는 틀림.

int T;
int mod = TEST;
char str[200100];

typedef struct st
{
	char *str;
	struct st *next;
}HASH;

HASH Hash[TEST + 100];
HASH POOL[200100];
int cnt;

int strcmp(char *a, char *b, int len)
{
	int i;
	for (i = 0; i < len; i++)
		if (a[i] != b[i]) return 1;
	return 0;
}

int MOD(ll n)
{
	if (n >= 0) return n % mod;

	return ((-n / mod + 1) * mod + n) % mod;
}

int check(char *s, int len)
{
	HASH *nd;
	int i, d;
	ll h;

	int mul = 2;
	for (i = 0; i < mod; i++) Hash[i].next = 0;

	cnt = h = 0, d = 1;
	for (i = 0; i < len; i++)
	{
		d = MOD(d * mul);
		
		h = MOD((mul * h + str[i]));
	}

	d /= mul;

	nd = &POOL[cnt++];
	nd->str = str;
	nd->next = Hash[h].next;
	Hash[h].next = nd;

	//printf("d : %d\n", 35 * 35);
	//printf("%d %llu\n", ('b'), h);
	//printf("%d %llu\n", ('a' * 35 + 'b'), h);
	//printf("%d %llu\n", ('s' * 35 * 35 + 'a' * 35 + 'b') % mod , h);
	//printf("%llu %d\n", h, ((44361 - str[i - 1] * d)));
	//for (int k = 0; k < len; k++)
	//	printf("%c", *(str + 0 + k));
	//putchar('\n');


	for (i = 1; str[i+len-1]; i++)
	{
		//h = (((h - str[i - 1] * d) * mul + str[i + len - 1]));
		h = MOD((((h - str[i - 1] * d) * mul + str[i + len - 1])));
		
		//if (h >= 0) h %= mod;
		//else h = (((-h / mod + 1) * mod + h) % mod);
		

	/*	printf("%llu %d\n", h, ((44361 - str[i - 1] * d)));
		for (int k = 0; k < len; k++)
			printf("%c", *(str + i + k));
		putchar('\n');*/

		if (Hash[h].next)
		{
			HASH *p;
			
			for (p = Hash[h].next; p; p = p->next)
				if (!strcmp(p->str, str + i, len)) return 1;
		}
		
		nd = &POOL[cnt++];
		nd->str = str + i;
		nd->next = Hash[h].next;
		Hash[h].next = nd;
	}
	
	return 0;
}

int main(void)
{
	int i, k, len;

	scanf("%d\n%s", &len, str);
	//printf("%d %s\n", len, str);

	printf("%d\n", check(str, 526));

	for (i = 1; i <= 530; i++)
	{
		printf("i : %d %d\n", i, check(str, i));
	}

	int l, r, m, ans;

	l = 2, r = len;

	//return 0;

	ans = 0;
	while (l <= r)
	{
		m = (l + r) / 2;
		
		if (check(str, m))
		{
			ans = m;
			l = m + 1;
		}
		else
			r = m - 1;
	}

	printf("%d\n", ans);

	return 0;
}
