//MAX_KEY : KEY의 최대 문자열 값.
//MAX_DATA : DATA의 최대 문자열 값
//MAX_TABLE : HASH TABLE의 크기.

//struct Hash : key와 data의 구조체.

//function
//1. hash(char *str)
//string -> key로 변경.
//정수값 hash는 적당히 큰 소수로 시작..
//hash rule로 hash 변경. hash =   hash << 5 + hash + c(char의 i번째 값)  % MAX_TABLE; 
//return hash % MAX_TABLE

//2. find(char *str, char *data)
//str을 key로 변경, 해당 key에 대한 data를 반환.
//h = hash(key)로 변경.
//key1, key2가 같은 hash인 경우 처리 필요. (실제 key 비교로 해결)
//key, data->data2->data3... 인 경우 처리 필요. (모두 출력할지 말지 등)

//3. add(char *key, char *data)
//같은 h일 경우 처리 필요.
//key, data가 이미 있는 경우 처리 필요.
//key, data2가 들어올 경우 처리 필요.


#include <stdio.h>
#include <string.h>
#include <memory.h>

#define MAX_KEY 64
#define MAX_DATA 128
#define MAX_TABLE 4096
 
typedef struct
{
	char key[MAX_KEY + 1];
	char data[MAX_DATA + 1];
}Hash;
Hash tb[MAX_TABLE];

unsigned long hash(const char *str)
{
	unsigned long hash = 5381;
	int c;

	while (c = *str++)
	{
		hash = (((hash << 5) + hash) + c) % MAX_TABLE;
	}

	return hash % MAX_TABLE;
}

int find(const char *key, char *data)
{
	unsigned long h = hash(key);
	int cnt = MAX_TABLE;
	int step = 1;

	while (tb[h].key[0] != 0 && cnt--)
	{
		if (strcmp(tb[h].key, key) == 0)
		{
			strcpy(data,tb[h].data);
			return 1;
		}
		h = (h + 1) % MAX_TABLE;
	}
	return 0;
}

int add(const char *key, char *data)
{
	unsigned long h = hash(key);
	int step = 1;
	int i = 0;

	while (tb[h].key[0] != 0)
	{
		if (strcmp(tb[h].key, key) == 0)
		{
			return 0;
		}

		h = (h + 1) % MAX_TABLE;
	}
	strcpy(tb[h].key, key);
	strcpy(tb[h].data, data);
	return 1;
}


int main(int argc, char* argv[])
{
	int T, N, Q;
	
	scanf("%d", &T);

	for (int test_case = 1; test_case <= T; test_case++)
	{
		memset(tb, 0, sizeof(tb));
		scanf("%d", &N);
		char k[MAX_KEY + 1];
		char d[MAX_DATA + 1];

		for (int i = 0; i < N; i++)
		{
			scanf("%s %s\n", &k, &d);
			add(k,d);
		}

		printf("#%d\n", test_case);

		scanf("%d", &Q);
		for (int i = 0; i < Q; i++)
		{
			char k[MAX_KEY + 1];
			char d[MAX_DATA + 1];
			
			scanf("%s\n", &k);

			if (find(k,d))
			{
				printf("%s\n",d);
			}
			else
			{
				printf("not find\n");
			}
		}
	}
	return 0;
}
