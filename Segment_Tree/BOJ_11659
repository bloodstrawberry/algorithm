//baekjoon_11659

#pragma warning(disable : 4996)
#include <stdio.h>
#include <stdlib.h>

int N, M;
int Arr[1001000];
int *tree;

//Segment Tree의 높이 H = log2(N)
//Node 개수 = 2(H+1) - 1;
//즉 2^k가 N보다 바로 큰 k를 구해야 한다.

int numberOfNode(int n) //log2(N)의 올림값
{
	int s, i;

	i = 0;
	s = 1;
	while (s<n)
	{
		s <<= 1;
		i++;
	}

	return i;
}

int treeSize(int n)
{
	return 1 << n;
}

int make(int s, int e, int node)
{
	// 구간을 쪼갠다. 더 이상 쪼갤 수 없는 곳에 입력 값을 넣는다.
	if (s == e) return tree[node] = Arr[s];

	//구간을 나눈다. 1~5 라면 1~3, 4~5로 나뉘게 된다.
	return (tree[node] = make(s, (s + e) / 2, node * 2) + make((s + e) / 2 + 1, e, node * 2 + 1));
}

int find(int s, int e, int a, int b, int node)
{
	//구간이 전혀 겹치지 않는 경우.
	if (b<s || e<a) return 0;

	//a~b 내에 s~e가 포함되어 있다면 tree[node] 리턴, 
	//3~9의 구간을 찾게 된다면 3~4 노드와 5~9 노드가 리턴되게 된다.
	if (a <= s && e <= b) return tree[node];

	//그 외의 경우는 다시 구간을 나눈다.
	return find(s, (s + e) / 2, a, b, node * 2) + find((s + e) / 2 + 1, e, a, b, node * 2 + 1);
}

int main(void)
{
	int i, k;
	int ANS;
	int a, b;
	int size;

	scanf("%d %d", &N, &M);

	//printf("%d\n", numberOfNode(N));
	//printf("%d\n", treeSize(numberOfNode(N)+1));

	tree = (int*)malloc(sizeof(int) * treeSize(numberOfNode(N) + 1) + 100);

	for (i = 1; i <= N;i++)
		scanf("%d", &Arr[i]);

	make(1, N, 1);

	for (i = 1; i <= M;i++)
	{
		scanf("%d %d", &a, &b);
		printf("%d\n", find(1, N, a, b, 1));
	}

	return 0;
}
