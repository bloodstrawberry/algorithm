#include <stdio.h>

int T, L;
char str[1010];
typedef struct st
{
	char ch;
	int idx;
}STACK;

int main()
{
	int i, k, tc, flag;
	STACK Stack[1010], tmp;
	int SP;

	scanf("%d", &T);
	for (tc = 1; tc <= T; tc++)
	{
		scanf("%d", &L);
		scanf("%s", str);

		if (L & 1)
		{
			printf("#%d %d\n", tc, -1);
			continue;
		}

		SP = 0;
		flag = 0;
		for (i = 0; i < L; i++)
		{
			if (str[i] == '(')
			{
				flag++;
				tmp.ch = str[i];
				tmp.idx = i;
				Stack[SP++] = tmp;
			}
			else if (str[i] == ')')
			{
				if (flag)
				{
					SP--;
					flag--;
				}
				else
				{
					tmp.ch = str[i];
					tmp.idx = i;
					Stack[SP++] = tmp;
				}
			}
		}

		if (Stack[SP - 1].ch == ')')
		{
			printf("#%d %d\n", tc, 1);
			printf("%d %d\n", Stack[0].idx, Stack[SP / 2 - 1].idx);
		}
		else if (Stack[0].ch == '(')
		{
			printf("#%d %d\n", tc, 1);
			printf("%d %d\n", Stack[SP / 2].idx, Stack[SP - 1].idx);
		}
		else
		{
			printf("#%d %d\n", tc, 2);

			for (i = 0; i < SP; i++)
				if (Stack[i].ch == '(') break;

			printf("%d %d\n", Stack[0].idx, Stack[i - 1].idx);

			if (i < SP / 2)
				printf("%d %d\n", Stack[SP / 2].idx, Stack[SP - 1].idx);
			else
			{
				int tmp = Stack[i - 1].idx;
		
				for (k = 0; k < i; k++)
					Stack[k].idx = tmp - Stack[k].idx;		

				printf("%d %d\n", Stack[i - 1 - SP / 2].idx, Stack[SP - 1].idx);

			}		
		}
	}
  
	return 0;
}
