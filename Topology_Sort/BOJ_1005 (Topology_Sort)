//baekjoon_1005
//위상 정렬
#pragma warning(disable : 4996)
#include <stdio.h>

int T, N, K, X, Y, W;
int TIME[1001];

typedef struct st
{
	int value;
	struct st *next;
}NODE;

NODE *HEAD[1001];
NODE node[100100];
int cnt;
int indegree[1001];
int ANS[1001];
int Que[100100];
int RP, WP;

void Make(int a, int b)
{
	NODE *p = &node[cnt++];

	p->value = b;
	p->next = NULL;

	if (HEAD[a] == NULL)
		HEAD[a] = p;
	else
	{
		p->next = HEAD[a];
		HEAD[a] = p;
	}
}

void output(int n)
{
	NODE *p = HEAD[n];

	while (p != NULL)
	{
		printf("%d\n", p->value);
		p = p->next;
	}
}

void input()
{
	int i;

	RP = WP = cnt = 0;
	scanf("%d %d", &N, &K);
	
	for (i = 1; i <= N;i++)
	{
		scanf("%d", &TIME[i]);
		ANS[i] = HEAD[i] = indegree[i] = 0;
	}
		
	for (i = 0; i < K;i++)
	{
		scanf("%d %d", &X, &Y);
		Make(X, Y);
		indegree[Y]++;
	}

	scanf("%d", &W);

}

int max(int a, int b)
{
	return (a > b) ? a : b;
}

void BFS()
{
	int i, out;
	NODE *p;

	while (WP > RP)
	{
		out = Que[RP++];

		ANS[out] += TIME[out];

		if (out == W) return;

		for (p = HEAD[out]; p != NULL; p = p->next)
		{
			int tmp = p->value;
			indegree[tmp]--;
			if (!indegree[tmp]) Que[WP++] = tmp;

			ANS[tmp] = max(ANS[tmp], ANS[out]);
		}
	}
}

int main()
{
	int tc, i;

	scanf("%d", &T);

	for (tc = 0; tc < T;tc++)
	{
		input();
	
		for (i = 1; i <= N;i++)
			if (!indegree[i]) Que[WP++] = i;

		BFS();

		printf("%d\n", ANS[W]);
	}

	return 0;
}
