//baekjoon_14427
//수열과 쿼리 15
#include <stdio.h>

int N, M;

typedef struct st
{
	int value;
	int index;
}HEAP;

HEAP heap[200100];
int heapIdx[200100];
int hn;

int isMin(HEAP a, HEAP b)
{
	if (a.value < b.value) return 1;
	else if (a.value == b.value)
	{
		if (a.index < b.index) return 1;
	}

	return 0;
}

HEAP pop(HEAP* heap, int& hn)
{
	int i;
	HEAP ret, tmp;

	ret = heap[1];
	heap[1] = heap[hn];
	heap[hn--].value = 0x7fff0000;

	for (i = 1; i * 2 <= hn;)
	{
		if (isMin(heap[i], heap[i * 2]) && isMin(heap[i], heap[i * 2 + 1])) break;
		else if (isMin(heap[i * 2], heap[i * 2 + 1]))
		{
			heapIdx[heap[i].index] = i * 2;
			heapIdx[heap[i * 2].index] = i;

			tmp = heap[i * 2];
			heap[i * 2] = heap[i];
			heap[i] = tmp;

			i = i * 2;
		}
		else
		{
			heapIdx[heap[i].index] = i * 2 + 1;
			heapIdx[heap[i * 2 + 1].index] = i;

			tmp = heap[i * 2 + 1];
			heap[i * 2 + 1] = heap[i];
			heap[i] = tmp;

			i = i * 2 + 1;
		}
	}

	return ret;
}

void push(HEAP* heap, int& hn, int x, int index)
{
	int i;
	HEAP tmp;

	heap[++hn].value = x;
	heap[hn].index = index;
	heapIdx[index] = hn;

	for (i = hn; i >= 1; i /= 2)
	{
		if (isMin(heap[i / 2], heap[i])) break;

		tmp = heap[i];
		heap[i] = heap[i / 2];
		heap[i / 2] = tmp;

		heapIdx[heap[i].index] = i;
		heapIdx[heap[i / 2].index] = i / 2;
	}
}

void update(HEAP* heap, int idx, int value)
{
	int i, hidx;
	HEAP tmp;

	heap[heapIdx[idx]].value = value;

	hidx = heapIdx[idx];
	
	//downdate와 update의 위치는 변경될 수 있다.
	//downdate
	for (i = hidx; i * 2 + 1 <= hn;) // i * 2 => i * 2 + 1이 됨. update이므로 index 관리가 필요.
	{
		if (isMin(heap[i], heap[i * 2]) && isMin(heap[i], heap[i * 2 + 1])) break;
		else if (isMin(heap[i * 2], heap[i * 2 + 1]))
		{
			tmp = heap[i * 2];
			heap[i * 2] = heap[i];
			heap[i] = tmp;

			heapIdx[heap[i].index] = i;
			heapIdx[heap[i * 2].index] = i * 2;

			i = i * 2;
		}
		else
		{
			tmp = heap[i * 2 + 1];
			heap[i * 2 + 1] = heap[i];
			heap[i] = tmp;

			heapIdx[heap[i].index] = i;
			heapIdx[heap[i * 2 + 1].index] = i * 2 + 1;

			i = i * 2 + 1;
		}
	}

	//update
	for (i = hidx; i > 1; i /= 2)
	{
		if (isMin(heap[i / 2], heap[i])) break;

		tmp = heap[i];
		heap[i] = heap[i / 2];
		heap[i / 2] = tmp;

		heapIdx[heap[i].index] = i;
		heapIdx[heap[i / 2].index] = i / 2;
	}
}

int main(void)
{
	int i, k;

	scanf("%d", &N);

	for (i = 1; i <= N;i++)
	{
		int a;
		scanf("%d", &a);
		push(heap, hn, a, i);
	}


	scanf("%d", &M);
	for (i = 0; i < M;i++)
	{
		int cmd;
		scanf("%d", &cmd);

		if (cmd == 1)
		{
			int An, value;

			scanf("%d %d", &An, &value);
			update(heap, An, value);
		}
		else
		{
			HEAP ans = heap[1];
			printf("%d\n", ans.index);
		}
	}

	return 0;
}
