//jungol_3240
//회원 참여도 분석1

#include <stdio.h>

typedef struct st
{
	int id;
	int freq;
	int *flag;
}INFO;

int N, M;
int data[200100][2];

int idFlag[200100];

INFO minheap[200100];
int minhn;

INFO maxheap[200100];
int maxhn;

int sum;

int isMin(INFO a, INFO b)
{
	if (a.freq < b.freq) return 1;
	else if (a.freq == b.freq)
	{
		if (a.id < b.id) return 1;
		else return 0;
	}
	return 0;
}

int isMax(INFO a, INFO b)
{
	if (a.freq > b.freq) return 1;
	else if (a.freq == b.freq)
	{
		if (a.id > b.id) return 1;
		else return 0;
	}
	return 0;
}

INFO minpop()
{
	int i;
	INFO rtn, tmp;

	rtn = minheap[1];
	minheap[1] = minheap[minhn];
	minheap[minhn--].freq = 0x7fff0000;

	for (i = 1; i * 2 <= minhn;)
	{
		
		if (isMin(minheap[i], minheap[i * 2]) && isMin(minheap[i], minheap[i * 2 + 1])) break;
		else if (isMin(minheap[i * 2], minheap[i * 2 + 1]))
		{
			tmp = minheap[i * 2];
			minheap[i * 2] = minheap[i];
			minheap[i] = tmp;

			i = i * 2;
		}
		else
		{
			tmp = minheap[i * 2 + 1];
			minheap[i * 2 + 1] = minheap[i];
			minheap[i] = tmp;

			i = i * 2 + 1;
		}
	}

	return rtn;
}


void minPush(int freq, int id)
{
	int i;
	INFO tmp;

	minheap[++minhn].freq = freq;
	minheap[minhn].id = id;
	minheap[minhn].flag = &idFlag[id];

	for (i = minhn; i > 1; i /= 2)
	{
		if (isMin(minheap[i / 2], minheap[i])) break;

		tmp = minheap[i / 2];
		minheap[i / 2] = minheap[i];
		minheap[i] = tmp;
	}
}

INFO maxpop()
{
	int i;
	INFO rtn, tmp;

	rtn = maxheap[1];
	maxheap[1] = maxheap[maxhn];
	maxheap[maxhn--].freq = 0;

	for (i = 1; i * 2 <= maxhn;)
	{

		if (isMax(maxheap[i], maxheap[i * 2]) && isMax(maxheap[i], maxheap[i * 2 + 1])) break;
		else if (isMax(maxheap[i * 2], maxheap[i * 2 + 1]))
		{
			tmp = maxheap[i * 2];
			maxheap[i * 2] = maxheap[i];
			maxheap[i] = tmp;

			i = i * 2;
		}
		else
		{
			tmp = maxheap[i * 2 + 1];
			maxheap[i * 2 + 1] = maxheap[i];
			maxheap[i] = tmp;

			i = i * 2 + 1;
		}
	}

	return rtn;
}


void maxPush(int freq, int id)
{
	int i;
	INFO tmp;

	maxheap[++maxhn].freq = freq;
	maxheap[maxhn].id = id;
	maxheap[maxhn].flag = &idFlag[id];

	for (i = maxhn; i > 1; i /= 2)
	{

		if (isMax(maxheap[i / 2], maxheap[i])) break;

		tmp = maxheap[i / 2];
		maxheap[i / 2] = maxheap[i];
		maxheap[i] = tmp;
	}
}

int main(int argc, char* argv[])
{
	int i, k, mode;
	int id, freq;
	INFO tmp;
	scanf("%d %d", &N, &M);

	sum = 0;
	for (i = 0; i < M; i++)
	{
		scanf("%d", &mode);

		if (mode == 0)
		{
			scanf("%d %d", &id, &freq);
			sum += freq;
			
			minPush(freq, id);
			maxPush(freq, id);
			
			
		}
		else if (mode == 1)
		{
			if (minhn)
			{
				while (minhn)
				{
					tmp = minpop();
					if (idFlag[tmp.id] == 0)
					{
						idFlag[tmp.id] = 1;
						printf("%d\n", tmp.id);
						sum -= tmp.freq;
						break;
					}
				}
			}
		}
		else if (mode == 2)
		{
			if (maxhn)
			{

				while (maxhn)
				{
					tmp = maxpop();
					if (idFlag[tmp.id] == 0)
					{
						idFlag[tmp.id] = 1;
						printf("%d\n", tmp.id);
						sum -= tmp.freq;
						break;
					}
				}
			}
		}
		else // mode == 3;
		{

			int s;
			if (minhn)
			{
				while (minhn)
				{
					if (*(minheap[1].flag)) minpop();
					else break;
				}
			}
			
			if (maxhn)
			{
				while (maxhn)
				{
					if (*maxheap[1].flag) maxpop();
					else break;
				}
			}

			s = sum;
			if (minhn) s -= minheap[1].freq;
			if (maxhn) s -= maxheap[1].freq;

			if (s < 0) printf("%d\n", 0);
			else (printf("%d\n", s));
		}


	}





	return 0;
}
