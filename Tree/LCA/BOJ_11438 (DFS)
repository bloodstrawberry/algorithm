//baekjoon_11438
//LCA 2, with DFS(timer)
#pragma warning(disable : 4996)
#include <stdio.h>
int N, M;

//p[i][j] = i의 2^j번째 조상  == i의 2^(j-1)번째 조상의 2^(j-1)번째 조상
//p[i][0] = i의 1번째 조상, parent
//p[i][j] = p[p[i][j-1]][j-1];
int p[100001][18];
int parent[100010];

//i번 노드에 들어오는 시간
int tin[100001];
//i번 노드에 나오는 시간
int tout[100001];
int timer;
int log; 

typedef struct st
{
	int value;
	struct st* next;
}NODE;

NODE HEAD[100010];
NODE POOL[100010 * 2];
int cnt;

void Make(int p, int c)
{
	NODE *nd = &POOL[cnt++];
	nd->value = c;

	if (HEAD[p].next == 0) HEAD[p].next = nd;
	else
	{
		nd->next = HEAD[p].next;
		HEAD[p].next = nd;
	}
}

void input()
{
	int i, k;
	int p, c;

	scanf("%d", &N);

	for (i = 0; i < N - 1;i++)
	{
		scanf("%d %d", &p, &c);		
		Make(p, c);
		Make(c, p);
	}

}

void DFS(int v, int parent)
{
	int i;
	NODE *nd;
	tin[v] = ++timer;

	//DP
	p[v][0] = parent;
	for (i = 1; i <= log;i++)
		p[v][i] = p[p[v][i - 1]][i - 1];

	for (nd = HEAD[v].next;nd;nd = nd->next)
		if (nd->value != parent) DFS(nd->value, v);

	tout[v] = ++timer;
}

int upper(int u, int v)
{
	//u가 v에 위에 있다면 1 리턴.
	//0이라고 해서 v가 u에 위에 있는 것은 아님.
	return (tin[u] <= tin[v] && tout[u] >= tout[v]);
}

int LCA(int u, int v)
{
	int i;

	if (upper(u, v)) return u;
	if (upper(v, u)) return v;

	//p[u][i] == 0 -> 조상 없음.
	for (i = log; i >= 0;i--)
		if (!upper(p[u][i], v))
			u = p[u][i];

	return p[u][0];
}

int main()
{
	int i, k, a, b;
	
	input();

	for (log = 1; (1 << log) <= N;log++);
	log--;

	DFS(1, 1);

	scanf("%d", &M);

	for (i = 0; i < M;i++)
	{
		scanf("%d %d", &a, &b);
		printf("%d\n", LCA(a,b));
	}

	return 0;
}
