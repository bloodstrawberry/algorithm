//baekjoon_3176
//도로 네트워크, LCA의 간선 중 최소, 최대값 

#include <stdio.h>

int N, K;

typedef struct st
{
	int value;
	int length;
	struct st *next;
}NODE;

NODE HEAD[100001];
NODE POOL[100001 * 2];
int cnt;

int max(int a, int b)
{
	return (a > b) ? a : b;
}

int min(int a, int b)
{
	return (a < b) ? a : b;
}

void Make(int p, int c, int l)
{
	NODE *nd = &POOL[cnt++];
	nd->value = c;
	nd->length = l;

	if (HEAD[p].next == 0) HEAD[p].next = nd;
	else
	{
		nd->next = HEAD[p].next;
		HEAD[p].next = nd;
	}
}

void input()
{
	int i, p, c, l;
	scanf("%d", &N);

	for (i = 0; i < N - 1; i++)
	{
		scanf("%d %d %d", &p, &c, &l);
		Make(p, c, l);
		Make(c, p, l);
	}
}

int Que[100001];
int RP, WP;
int VISIT[100001];
int parent[100001];
int p[100001][17];
int Depth[100001];
int length[100001];

int maxL[100001][17];
int minL[100001][17];

void BFS()
{
	int out;
	NODE *nd;

	Que[WP++] = 1;
	VISIT[1] = 1;
	Depth[1] = 1;

	while (WP > RP)
	{
		out = Que[RP++];

		for (nd = HEAD[out].next; nd; nd = nd->next)
		{
			int tmp = nd->value;
			if (!VISIT[tmp])
			{
				Que[WP++] = tmp;
				VISIT[tmp] = 1;
				Depth[tmp] = Depth[out] + 1;
				parent[tmp] = out;
				length[tmp] = nd->length;
			}
		}
	}
}

int LCA(int u, int v)
{
	int i, tmp, log;
	int minV, maxV;

	minV = 0x7fff0000;
	maxV = 0;

	if (Depth[u] < Depth[v])
	{
		tmp = u;
		u = v;
		v = tmp;
	}
	
	for (log = 1; (1 << log) <= Depth[u]; log++);
	log--;

	for (i = log; i >= 0; i--)
	{
		if (Depth[u] - (1 << i) >= Depth[v])
		{
			minV = min(minV, minL[u][i]);
			maxV = max(maxV, maxL[u][i]);
			u = p[u][i];
		}
	}
	
	
	if (u == v)
	{
		printf("%d %d\n", minV, maxV);
		return u;
	}
	else 
	{
		for (i = log; i >= 0; i--)
		{
			if (p[u][i] != 0 && p[u][i] != p[v][i])
			{
				minV = min(minV, minL[u][i]);
				maxV = max(maxV, maxL[u][i]);
				minV = min(minV, minL[v][i]);
				maxV = max(maxV, maxL[v][i]);
				u = p[u][i];
				v = p[v][i];
			}
		}
    
    //바로 위의 부모가 같을 때 까지 찾으므로, 한번 더 갱신 필요.
		minV = min(minV, minL[u][0]);
		maxV = max(maxV, maxL[u][0]);
		minV = min(minV, minL[v][0]);
		maxV = max(maxV, maxL[v][0]);
	}



	printf("%d %d\n", minV, maxV);
	
	return p[u][0];
}


int main()
{
	int i, k;
	int u, v;

	input();
	BFS();

	for (i = 1; i <= N; i++)
	{
		p[i][0] = parent[i];
		maxL[i][0] = length[i];
		minL[i][0] = length[i];
	} 

	for (i = 1; (1 << i) < N; i++)
	{
		for (k = 1; k <= N; k++)
		{
			p[k][i] = p[p[k][i - 1]][i - 1];
			
      //8번째의 부모까지 최소는, 1~4번째 부모의 최소 와 5~8번째 부모의 최소 중 
      maxL[k][i] = max(maxL[k][i - 1], maxL[p[k][i - 1]][i - 1]);
			minL[k][i] = min(minL[k][i - 1], minL[p[k][i - 1]][i - 1]);
		}
	}

	scanf("%d", &K);

	for (i = 0; i < K; i++)
	{
		scanf("%d %d", &u, &v);
		LCA(u, v);
	}

	return 0;
}
