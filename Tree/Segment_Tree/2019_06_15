#include <stdio.h>

int T, N, S;

typedef struct st
{
	int node;
	struct st *next;
}NODE;

NODE HEAD[100100];
NODE POOL[100100];
int pcnt;

int tree[400400];
int cnt, idx;

int init()
{
	int i, ret;
	cnt = pcnt = 0;

	for (i = 1; i <= N;i++) HEAD[i].next = 0;
	for (i = 0; i < N * 4; i++) tree[i] = 0;

	ret = 1;
	while (ret < N) ret *= 2;
	return ret - 1;
}

void Make(int p, int c)
{
	NODE *nd = &POOL[pcnt++];
	nd->node = c;

	nd->next = HEAD[p].next;
	HEAD[p].next = nd;
}

int count(int s, int e)
{
	int ret;

	ret = 0;
	while (s <= e)
	{
		if (s % 2 == 1) ret += tree[s];
		if (e % 2 == 0) ret += tree[e];

		s = (s + 1) / 2;
		e = (e - 1) / 2;
	}

	return ret;
}

void update(int node, int val)
{
	while (node)
	{
		tree[node] += val;
		node /= 2;
	}
}

void dfs(int dir)
{
	for (NODE *p = HEAD[dir].next;p;p = p->next)
	{
		cnt += count(idx + p->node, idx + N);
		update(idx + p->node, 1);
		dfs(p->node);
		update(idx + p->node, -1);
	}
}

int main()
{
	int i, k, tc;

	scanf("%d", &T);
	for (tc = 1; tc <= T;tc++)
	{
		int p, c;
		scanf("%d %d", &N, &S);

		idx = init();

		for (i = 0; i < N - 1;i++)
		{
			scanf("%d %d", &p, &c);
			Make(p, c);
		}

		update(idx + S, 1);
		dfs(S);

		printf("#%d %d\n", tc, cnt);
	}

	return 0;
}

