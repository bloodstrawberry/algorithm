//baekjoon_12738
//가장 긴 증가하는 부분 수열 3.

#include <stdio.h>
#define MAX (1000000)
typedef long long int ll;

int N;
int tree[4004000];

int c[1001000];

typedef struct st
{
	int value;
	int index;
	int real;
}ARR;

ARR a[1001000];
ARR b[1001000];

void merge(int start, int end)
{
	int mid, i, j, k;

	mid = (start + end) / 2;
	i = start;
	j = mid + 1;
	k = 0;

	while (i <= mid && j <= end)
	{
		if (a[i].value <= a[j].value) b[k++] = a[i++];
		else b[k++] = a[j++];
	}

	while (i <= mid) b[k++] = a[i++];
	while (j <= end) b[k++] = a[j++];
	for (i = start; i <= end;i++)
		a[i] = b[i - start];

}

void sort(int start, int end)
{
	int mid;
	if (start >= end) return;

	mid = (start + end) / 2;
	sort(start, mid);
	sort(mid + 1, end);
	merge(start, end);
}


int max(int a, int b)
{
	return (a > b) ? a : b;
}

int maximum(int s, int e, int a, int b, int node)
{
	if (b < s || e < a) return 0;
	if (a <= s && e <= b) return tree[node];

	return max(maximum(s, (s + e) / 2, a, b, node * 2), maximum((s + e) / 2 + 1, e, a, b, node * 2 + 1));
}

void update(int s, int e, int index, int value, int node)
{
	if (index < s || e < index) return;

	tree[node] = max(tree[node], value);

	if (s != e)
	{
		update(s, (s + e) / 2, index, value, node * 2);
		update((s + e) / 2 + 1, e, index, value, node * 2 + 1);
	}
}

int main(void)
{
	int i, k, ans, tmp, cnt;

	scanf("%d", &N);

	for (i = 0; i < N;i++)
	{
		scanf("%d", &a[i].value);
		a[i].index = i;
	}

	sort(0, N - 1);

	cnt = 1;
	a[0].real = cnt;
	for (i = 1; i < N;i++)
	{
		if (a[i - 1].value != a[i].value) a[i].real = ++cnt;
		else a[i].real = cnt;
	}
		
	for (i = 0; i < N;i++) c[a[i].index] = a[i].real;

	ans = 0;
	for (i = 0; i < N;i++)
	{
		int num;

		num = c[i];
		tmp = maximum(1, MAX, 1, num - 1, 1);

		if (ans < tmp + 1) ans = tmp + 1;

		update(1, MAX, num, tmp + 1, 1);
	}

	printf("%d\n", ans);

	return 0;
}



