//jungol_3240
//회원 참여도 분석 1

#include <stdio.h>

typedef struct st
{
	int minId;
	int maxId;
}TREE;

int N, M;
TREE LSeg[1 << 18];
int Lidx, Lcnt, Lsum,Llast;
TREE RSeg[1 << 18];
int Ridx, Rcnt, Rsum,Rlast;

int data[100002][2];

//a가 더 작으면 1리턴
int isMin(int a, int b)
{
	if (data[a][0] < data[b][0]) return a;
	else if (data[a][0] == data[b][0])
	{
		if (a < b) return a;
		else return b;
	}
	return b;
}

int isMax(int a, int b)
{
	if (data[a][0] > data[b][0]) return a;
	else if (data[a][0] == data[b][0])
	{
		if (a > b) return a;
		else return b;
	}
	return b;
}

TREE makeTREE(int minid, int maxid)
{
	TREE tmp;

	tmp.minId = minid;
	tmp.maxId = maxid;

	return tmp;
}

int findidx(int n)
{
	int idx;

	idx = 1;

	while (n > idx) idx = idx << 1;

	return idx;
}

void updateL(int idx, int id, int mode)
{
	int i;
	int index = Lidx + idx;
	
	if (mode)
	{
		LSeg[index] = makeTREE(id, id);
		Lcnt++;
		Lsum += data[id][0];
	}
	else
	{
		LSeg[index] = makeTREE(100001, 0);
		Lcnt--;
		Lsum -= data[id][0];
	}

	for (i = index / 2; i >= 1; i /= 2)
	{
		LSeg[i].minId = isMin(LSeg[i * 2].minId, LSeg[i * 2 + 1].minId);
		LSeg[i].maxId = isMax(LSeg[i * 2].maxId, LSeg[i * 2 + 1].maxId);
	}

}



int main(int argc, char* argv[])
{
	int i, k, mode;
	int id, freq;
	TREE tmp;
	scanf("%d %d", &N, &M);

	Lidx = Ridx = findidx(N);
	data[100001][0] = 20001;
	data[0][0] = -1;

	for (i = 0; i < Lidx * 2 + 1; i++)
		LSeg[i] = makeTREE(100001,0);

	for (i = 0; i < M; i++)
	{
		scanf("%d", &mode);

		if (mode == 0)
		{
			scanf("%d %d", &id, &freq);

			id++;

			data[id][0] = freq;
			data[id][1] = Llast;

			updateL(Llast++, id, 1);

		}
		else if (mode == 1)
		{
			int removeMinId = LSeg[1].minId;
			if (Lcnt)
			{
				updateL(data[removeMinId][1], removeMinId, 0);
				printf("%d\n", removeMinId - 1);
			}

		}
		else if (mode == 2)
		{
			int removeMaxId = LSeg[1].maxId;
			if (Lcnt)
			{
				updateL(data[removeMaxId][1], removeMaxId, 0);
				printf("%d\n", removeMaxId - 1);
			}
		}
		else // mode == 3;
		{
			int sum = Lsum - data[LSeg[1].maxId][0] - data[LSeg[1].minId][0];
			if (sum < 0) sum = 0;
			printf("%d\n", sum);
		}
	}

	return 0;
}
