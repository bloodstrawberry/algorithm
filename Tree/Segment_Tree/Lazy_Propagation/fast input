#include <time.h>
#include <stdio.h>
#include <string.h>

typedef long long ll;

ll Store[4][400100];

ll Arr[100100];
ll tree[400100];

ll lazySum[4][400100];
ll lazyAns[400100];

char buf[1 << 18];
int idx, nidx;

static inline char read()
{
	if (idx == nidx)
	{
		nidx = fread(buf, 1, 1 << 18, stdin);
		idx = 0;
	}
	return buf[idx++];
}
static inline int readInt()
{
	int sum = 0;
	char now = read();
	char flag = 0;

	while (now == ' ' || now == '\n')
		now = read();
	if (now == '-')
	{
		flag = 1;
		now = read();
	}
	while (now != ' '&&now != '\n'&&now != EOF)
	{
		sum *= 10;
		sum += now - '0';
		now = read();
	}
	if (flag)
		sum *= -1;
	return sum;
}

ll init(ll* tree, int s, int e, int Node)
{
	if (s == e) return tree[Node] = Arr[s];

	return tree[Node] = init(tree, s, (s + e) / 2, Node * 2) + init(tree, (s + e) / 2 + 1, e, Node * 2 + 1);
}

void update_lazy(ll* tree, ll* lazy, int s, int e, int Node)
{
	if (lazy[Node])
	{
		tree[Node] += (e - s + 1) * lazy[Node];

		if (s != e)
		{
			lazy[Node * 2] += lazy[Node];
			lazy[Node * 2 + 1] += lazy[Node];
		}

		lazy[Node] = 0;
	}
}

int cnt;
ll findSum(ll* tree, ll* lazy, int s, int e, int a, int b, int Node)
{
	update_lazy(tree, lazy, s, e, Node);

	if (b < s || e < a) return 0;
	if (a <= s && e <= b) return tree[Node];

	if (b <= (s + e) / 2)
	{
		return findSum(tree, lazy, s, (s + e) / 2, a, b, Node * 2);
	}
	else
	{
		return findSum(tree, lazy, (s + e) / 2 + 1, e, a, b, Node * 2 + 1);
	}
}

ll findSum2(ll* tree, int s, int e, int a, int b, int Node)
{
	if (b < s || e < a) return 0;
	if (a <= s && e <= b) return tree[Node];

	return findSum2(tree, s, (s + e) / 2, a, b, Node * 2) + findSum2(tree, (s + e) / 2 + 1, e, a, b, Node * 2 + 1);
}


void update(ll* tree, ll* lazy, int s, int e, int Node, int left, int right, ll diff)
{
	++cnt;
	//update_lazy(tree, lazy, s, e, Node);
	if (right < s || e < left) return;

	if (left <= s && e <= right)
	{
		tree[Node] += (e - s + 1) * diff;
		if (s != e)
		{
			lazy[Node * 2] += diff;
			lazy[Node * 2 + 1] += diff;
		}

		return;
	}

	int mid = (s + e) / 2;
	if (left >= (mid + 1)) {
		update(tree, lazy, (s + e) / 2 + 1, e, Node * 2 + 1, left, right, diff);
		return;
	}
	if (right <= mid) {
		update(tree, lazy, s, (s + e) / 2, Node * 2, left, right, diff);
		 return;
	}
	

		update(tree, lazy, s, (s + e) / 2, Node * 2, left, mid, diff);
		update(tree, lazy, (s + e) / 2 + 1, e, Node * 2 + 1, mid + 1, right, diff);

	//tree[Node] = tree[Node * 2] + tree[Node * 2 + 1];

	return;
}

void update2(ll* tree, int s, int e, int Node, int index, ll diff)
{
	if (index < s || e < index) return;
	tree[Node] += diff;

	if (s != e)
	{
		update2(tree, s, (s + e) / 2, Node * 2, index, diff);
		update2(tree, (s + e) / 2 + 1, e, Node * 2 + 1, index, diff);
	}
}



int T, N, Q;



int main()
{
	int tc, i, j;

	//freopen("input.txt", "r", stdin);

	clock_t before;
	double result;
	before = clock();

	//scanf("%d", &T);
	T = readInt();
	for (tc = 1; tc <= T;tc++)
	{
		//scanf("%d %d", &N, &Q);
		N = readInt();
		Q = readInt();
		int cmd;
		int x, y, k;
		ll c, ans;

		
		cnt = 0;
		memset(tree, 0, sizeof(tree));
		memset(Store, 0, sizeof(Store));	
		memset(lazySum, 0, sizeof(lazySum));


		//for(i = 1; i<=3; i++)
		//memset(Store[j], 0, sizeof(Store[j]));
		/*
		for(i = 1; i<= 4*N; i++) tree[i] = 0;

		for(i = 1; i<=N*4; i++)
		{
		for(j = 1; j<=3;j++)
		Store[j][i] = lazySum[j][i] = 0;
		}
		*/


		ans = 0;
		for (i = 0; i<Q;i++)
		{
			//scanf("%d", &cmd);
			cmd = readInt();
			if (cmd == 1)
			{
				//scanf("%d %d %d %lld", &x, &y, &k, &c);

				x = readInt();
				y = readInt();
				k = readInt();
				c = readInt();

				update(Store[k], lazySum[k], 1, N, 1, x, y, c);
				//update_lazy(Store[k], lazySum[k], x, y, 1);
			}
			else if (cmd == 2)
			{
				//scanf("%d %lld", &x, &c);
				
				x = readInt();
				c = readInt();
				ll min = 0x7fff0000;

				for (j = 1; j <= 3; j++)
				{
					ll tmp = findSum(Store[j], lazySum[j], 1, N, x, x, 1);
					if (min > tmp) min = tmp;
				}
				if (min > c) min = c;

				for (j = 1; j <= 3;j++)
					update(Store[j], lazySum[j], 1, N, 1, x, x, -min);

				update2(tree, 1, N, 1, x, min);

			}
			else
			{
				//scanf("%d %d", &x, &y);
				x = readInt();
				y = readInt();
				ans += findSum2(tree, 1, N, x, y, 1);
			}

		}

		printf("#%d %lld\n", tc, ans); v
		printf("%d\n", cnt);
	}

	result = (double)(clock() - before) / CLOCKS_PER_SEC;
	printf("%5.2fs\n", result);


	return 0;
}
