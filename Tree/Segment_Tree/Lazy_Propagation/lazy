#include <stdio.h>

typedef long long ll;

ll Store[4][400100];

ll Arr[100100];
ll tree[400100];

ll lazySum[4][400100];
ll lazyAns[400100];

ll init(ll* tree, int s, int e, int Node)
{
	if (s == e) return tree[Node] = Arr[s];

	return tree[Node] = init(tree, s, (s + e) / 2, Node * 2) + init(tree, (s + e) / 2 + 1, e, Node * 2 + 1);
}

void update_lazy(ll* tree, ll* lazy, int s, int e, int Node)
{
	if(lazy[Node])
	{
		tree[Node] += (e - s + 1) * lazy[Node];

		if(s != e)
		{
			lazy[Node*2] += lazy[Node];
			lazy[Node*2+1] += lazy[Node];
		}

		lazy[Node] = 0;
	}
}


ll findSum(ll* tree, ll* lazy, int s, int e, int a, int b, int Node)
{
	update_lazy(tree, lazy, s, e, Node);

	if (b < s || e < a) return 0;
	if (a <= s && e <= b) return tree[Node];

	return findSum(tree, lazy, s, (s + e) / 2, a, b, Node * 2) + findSum(tree, lazy, (s + e) / 2 + 1, e, a, b, Node * 2 + 1);
}

void update(ll* tree, ll* lazy, int s, int e, int Node, int left, int right, ll diff)
{

	update_lazy(tree, lazy, s, e, Node);
	if (right < s || e < left) return;
	
	if (left <= s && e <= right) //범위에 포함이 된다면.
	{
		tree[Node] += (e - s + 1) * diff;
		if (s != e)
		{
			lazy[Node * 2] += diff;
			lazy[Node * 2 + 1] += diff;
		}

		//lazy 설정 후, 나중에 update.
		return;
	}

	update(tree, lazy, s, (s + e) / 2, Node * 2, left, right, diff);
	update(tree, lazy, (s + e) / 2 + 1, e, Node * 2 + 1, left, right, diff);

	tree[Node] = tree[Node * 2] + tree[Node * 2 + 1];

	return;
}

int T, N, Q;

int main() 
{
	int tc, i, j;

	freopen("input.txt", "r", stdin);

	scanf("%d",&T);
	for(tc = 1; tc<=T;tc++)
	{
		scanf("%d %d", &N, &Q);

		int cmd;
		int x, y, k;
		ll c, ans;

		for(i = 1; i<= 4*N; i++) tree[i] = lazyAns[i] = 0;
		for(i = 1; i<=N*4; i++)
		{
			for(j = 1; j<=3;j++)
				Store[j][i] = lazySum[j][i] = 0;
		}



		ans = 0;
		for(i = 0; i<Q;i++)
		{
			scanf("%d", &cmd);

			if(cmd == 1)
			{
				scanf("%d %d %d %lld", &x, &y, &k, &c);

				update(Store[k], lazySum[k], 1, N, 1, x, y, c);
				
				/*printf("------------------\n");
				for(int t = 1; t<=5; t++)
				{
					for(int tt = 1; tt<= 3; tt++)
					{
						printf("%d ", findSum(Store[j], lazySum[j], 1, N, t, t, 1));
					}
					putchar('\n');
				}
				printf("----------------\n");
*/
			}
			else if(cmd == 2)
			{
				scanf("%d %lld", &x, &c);

				ll min = 0x7fff0000;
				for(j = 1; j<=3; j++)
				{
					ll tmp = findSum(Store[j], lazySum[j], 1, N, x, x, 1);
					if(min > tmp) min = tmp;
				}
				if(min > c) min = c;

				for(j = 1; j<=3;j++)
					update(Store[j], lazySum[j], 1, N, 1, x, x, -min);

				update(tree, lazyAns, 1, N, 1, x, x, min);		

			}
			else if(cmd == 3)
			{
				scanf("%d %d", &x, &y);
				ans += findSum(tree, lazyAns, 1, N, x, y,1); 
			}

		}

		printf("#%d %lld\n", tc, ans);

	}



	return 0;
}



