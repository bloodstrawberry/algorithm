#include <stdio.h>

//바코드 길이 = 95

int T;
char str[3030];
char rev[3030];

typedef struct st
{
	int A;
	int B[10];
	int C[10];
}ANSWER;

ANSWER ANS[100];

int hash(int index, int len)
{
	int i, ret, mul;

	ret = 0, mul = 1;
	for (i = index + len - 1; i >= index;i--)
	{
		ret += (str[i] - '0') * mul;
		mul *= 2;
	}
	
	return ret;
}

int check(int index)
{
	int i;

	if (hash(index, 3) != 5) return 0; // 5 = 101
	if (hash(index+46, 4) != 10) return 0; // 10 = 1010
	if (hash(index+92, 3) != 5) return 0;
	
	return 1;
}

int HASH_LG[2][256];
//int HASH_G[256];
int HASH_C[256];
int LIST_A[11][7];

int bacode_check(int index)
{
	int odd, even, ans;

	odd = ANS[index].A + ANS[index].B[1] + ANS[index].B[3] + ANS[index].B[5] + ANS[index].C[1] + ANS[index].C[3];
	even = ANS[index].B[0] + ANS[index].B[2] + ANS[index].B[4] + ANS[index].C[0] + ANS[index].C[2] + ANS[index].C[4];
	
	//printf("here : %d \n", odd + even * 3);
	//printf("there : %d\n", ANS[index].C[5]);
	

	ans = (odd + even * 3) % 10;
	ans = 10 - ans;

	if (ans == ANS[index].C[5]) return 1;
	return 0;
}

void print_bacode(int index)
{
	int i;
	
	printf("%d", ANS[index].A);
	for (i = 0; i < 6;i++) printf("%d", ANS[index].B[i]);
	for (i = 0; i < 6;i++) printf("%d", ANS[index].C[i]);
}

int main() 
{
	int tc, i, k, a, cnt;

	//HASH_L[13] = 0;
	//HASH_L[25] = 1;
	//HASH_L[19] = 2;
	//HASH_L[61] = 3;
	//HASH_L[35] = 4;
	//HASH_L[49] = 5;
	//HASH_L[47] = 6;
	//HASH_L[59] = 7;
	//HASH_L[55] = 8;
	//HASH_L[11] = 9;

	//HASH_G[39] = 0;
	//HASH_G[51] = 1;
	//HASH_G[27] = 2;
	//HASH_G[33] = 3;
	//HASH_G[29] = 4;
	//HASH_G[57] = 5;
	//HASH_G[5] = 6;
	//HASH_G[17] = 7;
	//HASH_G[9] = 8;
	//HASH_G[23] = 9;

	for (i = 0; i < 256;i++) HASH_LG[0][i] = HASH_LG[1][i] = HASH_C[i] = -1;

	HASH_LG[0][13] = 0;
	HASH_LG[0][25] = 1;
	HASH_LG[0][19] = 2;
	HASH_LG[0][61] = 3;
	HASH_LG[0][35] = 4;
	HASH_LG[0][49] = 5;
	HASH_LG[0][47] = 6;
	HASH_LG[0][59] = 7;
	HASH_LG[0][55] = 8;
	HASH_LG[0][11] = 9;

	HASH_LG[1][39] = 0;
	HASH_LG[1][51] = 1;
	HASH_LG[1][27] = 2;
	HASH_LG[1][33] = 3;
	HASH_LG[1][29] = 4;
	HASH_LG[1][57] = 5;
	HASH_LG[1][5] = 6;
	HASH_LG[1][17] = 7;
	HASH_LG[1][9] = 8;
	HASH_LG[1][23] = 9;

	HASH_C[114] = 0;
	HASH_C[102] = 1;
	HASH_C[108] = 2;
	HASH_C[66] = 3;
	HASH_C[92] = 4;
	HASH_C[78] = 5;
	HASH_C[80] = 6;
	HASH_C[68] = 7;
	HASH_C[72] = 8;
	HASH_C[116] = 9;

	LIST_A[0][0] = 0;
	LIST_A[0][1] = 0;
	LIST_A[0][2] = 0;
	LIST_A[0][3] = 0;
	LIST_A[0][4] = 0;
	LIST_A[0][5] = 0;

	LIST_A[1][0] = 0;
	LIST_A[1][1] = 0;
	LIST_A[1][2] = 1;
	LIST_A[1][3] = 0;
	LIST_A[1][4] = 1;
	LIST_A[1][5] = 1;

	LIST_A[2][0] = 0;
	LIST_A[2][1] = 0;
	LIST_A[2][2] = 1;
	LIST_A[2][3] = 1;
	LIST_A[2][4] = 0;
	LIST_A[2][5] = 1;

	LIST_A[3][0] = 0;
	LIST_A[3][1] = 0;
	LIST_A[3][2] = 1;
	LIST_A[3][3] = 1;
	LIST_A[3][4] = 1;
	LIST_A[3][5] = 0;

	LIST_A[4][0] = 0;
	LIST_A[4][1] = 1;
	LIST_A[4][2] = 0;
	LIST_A[4][3] = 0;
	LIST_A[4][4] = 1;
	LIST_A[4][5] = 1;

	LIST_A[5][0] = 0;
	LIST_A[5][1] = 1;
	LIST_A[5][2] = 1;
	LIST_A[5][3] = 0;
	LIST_A[5][4] = 0;
	LIST_A[5][5] = 1;

	LIST_A[6][0] = 0;
	LIST_A[6][1] = 1;
	LIST_A[6][2] = 1;
	LIST_A[6][3] = 1;
	LIST_A[6][4] = 0;
	LIST_A[6][5] = 0;

	LIST_A[7][0] = 0;
	LIST_A[7][1] = 1;
	LIST_A[7][2] = 0;
	LIST_A[7][3] = 1;
	LIST_A[7][4] = 0;
	LIST_A[7][5] = 1;

	LIST_A[8][0] = 0;
	LIST_A[8][1] = 1;
	LIST_A[8][2] = 0;
	LIST_A[8][3] = 1;
	LIST_A[8][4] = 1;
	LIST_A[8][5] = 0;

	LIST_A[9][0] = 0;
	LIST_A[9][1] = 1;
	LIST_A[9][2] = 1;
	LIST_A[9][3] = 0;
	LIST_A[9][4] = 1;
	LIST_A[9][5] = 0;

	scanf("%d", &T);
	for (tc = 1; tc <= T;tc++)
	{
		printf("%d ", tc);
		int len;
		scanf("%s", str);

		for (len = 0; str[len]; len++);
		printf("%d\n", len);

		cnt = 0;
		
		for (i = 0; i < len - 94;i++)
		{
			if (str[i] == '0') continue;

			int ans_flag = 0;

			if (check(i))
			{
				printf("here %d \n", i);
				for (k = i; k < i + 95;k++) printf("%c", str[k]);
				putchar('\n');
				// index = i 부터 101 , 끝에도 101, 가운데 01010이 있다면 바코드.
				// A값 찾기.
				for (a = 0; a < 10; a++)
				{
					
					int tmp, flag;

					tmp = flag = 0;
					for (k = i + 3; k < i + 45;k++)
					{
						if (HASH_LG[LIST_A[a][tmp]][hash(k, 7)] == -1)
						{
							flag = 1;
							break;
						}

						ANS[cnt].B[tmp] = HASH_LG[LIST_A[a][tmp]][hash(k, 7)];
						//printf("%d", HASH_LG[LIST_A[a][tmp]][hash(k, 7)]);
						tmp++;
						k += 6;
					}
					//putchar('\n');
					if (flag == 0) break;
				}

				//for (k = 0; k < 6;k++) printf("%d ", ANS[cnt].B[k]);
				printf("a : %d\n", a);
				//if (a == 10) break;
				//putchar('\n');
				ANS[cnt].A = a;
				//printf("%d\n", ANS[cnt].A);
				// 50부터 그룹 C
				int cnt_C = 0;
				int C_check = 0;
				for (k = i + 50; k < i + 92;k++)
				{
					if (HASH_C[hash(k, 7)] == -1)
					{
						C_check = 1;
						break;
					}
					ANS[cnt].C[cnt_C++] = HASH_C[hash(k, 7)];
					printf("c : %d %d\n", hash(k, 7), HASH_C[hash(k, 7)]);
					k += 6;
				}

				//for (k = 0; k < 6;k++) printf("%d ", ANS[cnt].C[k]);

				//putchar('\n');
				if (!C_check && bacode_check(cnt))
				{
					//printf("bacode!\n");
					print_bacode(cnt);
					putchar('\n');
					cnt++;
					i += 93;
					ans_flag = 1;
				}

				if (ans_flag) continue;


				//거꾸로 체크. ---------------------------------------------------------------------------------------------------------------

				int revcnt = 0;
				for (k = i; k < i + 95;k++) rev[revcnt++] = str[k];
				//for (k = i; k < i + 95;k++) printf("%c", str[k]);
				//putchar('\n');
				//printf("revcnt : %d\n", revcnt);
				for (k = i; k < i + 95;k++) str[k] = rev[--revcnt];
				
				//for (k = i; k < i + 95;k++) printf("%c", str[k]);
				//putchar('\n');

				for (a = 0; a < 10; a++)
				{
					int tmp, flag;

					tmp = flag = 0;
					for (k = i + 3; k < i + 45;k++)
					{
						if (HASH_LG[LIST_A[a][tmp]][hash(k, 7)] == -1)
						{
							flag = 1;
							//printf("here\n");
							break;
						}

						ANS[cnt].B[tmp] = HASH_LG[LIST_A[a][tmp]][hash(k, 7)];
						printf("%d", HASH_LG[LIST_A[a][tmp]][hash(k, 7)]);
						tmp++;
						k += 6;
					}
					//putchar('\n');
					if (flag == 0) break;
				}

				printf("a : %d\n", a);

				//printf("a : %d\n", a);
				//for (k = 0; k < 6;k++) printf("%d ", ANS[cnt].B[k]);

				//if (a == 10) break;
				//putchar('\n');
				ANS[cnt].A = a;
				//printf("%d\n", ANS[cnt].A);
				// 50부터 그룹 C
				cnt_C = 0;
				C_check = 0;
				for (k = i + 50; k < i + 92;k++)
				{
					if (HASH_C[hash(k, 7)] == -1)
					{
						C_check = 1;
						break;
					}
					ANS[cnt].C[cnt_C++] = HASH_C[hash(k, 7)];
					//printf("c : %d %d\n", hash(k, 7), HASH_C[hash(k, 7)]);
					k += 6;
				}

				//for (k = 0; k < 6;k++) printf("%d ", ANS[cnt].C[k]);

				//putchar('\n');
				if (!C_check && bacode_check(cnt))
				{
					//printf("bacode!\n");
					print_bacode(cnt);
					putchar('\n');
					cnt++;
					i += 93;
					ans_flag = 1;
				}

			}
			
			
		

		}
		
	



	}
	
	


	return 0;

}










